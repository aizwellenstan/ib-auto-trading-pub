import sys 
mainFolder = '../'
sys.path.append(mainFolder)
import pandas as pd
import os
import numpy as np
from modules.riskOfRuin import calcRisk
from modules.aiztradingview import GetMomentum, GetPut
from modules.data import GetNpData
from modules.haveOptionChain import haveOptionChain

longTernList = ['AMZN','UNH','HD','TMO']

longTernDict = {'SOTK': 6.260000228881836, 'VOD': 15.489999771118164, 'SLM': 15.859999656677246, 'MRTN': 17.149999618530273, 'INFY': 18.440000534057617, 'PHG': 20.93000030517578, 'SHEN': 20.940000534057617,

45.91999816894531, 'WTRG': 46.88999938964844, 'GCBC': 47.849998474121094, 'FAST': 47.88999938964844, 'GBCI': 48.0, 'WASH': 48.61000061035156, 'STC': 48.810001373291016, 'LKQ': 50.16999816894531, 'PLUS': 50.650001525878906, 'ARTNA': 50.77000045776367, 'LSCC': 52.459999084472656, 'WABC': 55.0, 'SF': 55.369998931884766, 'SEE': 55.83000183105469, 'HDB':
56.36000061035156, 'TREX': 56.470001220703125, 'LNT': 56.810001373291016, 'BRO': 58.7599983215332, 'TD': 61.380001068115234, 'OTTR': 66.08000183105469, 'BALL':
67.04000091552734, 'XEL': 68.55000305175781, 'PNW': 69.93000030517578, 'CP': 71.41000366210938,
'UFPI': 72.31999969482422, 'DHI': 72.56999969482422, 'BBY': 73.33999633789062, 'GIS': 73.94999694824219, 'CLFD': 74.05999755859375, 'ENSG': 74.5199966430664, 'ADC': 74.7300033569336, 'MGEE': 76.83000183105469, 'LEN': 77.26000213623047, 'PLXS': 77.87999725341797, 'TTC': 78.41999816894531, 'MS': 78.86000061035156, 'BMI': 80.36000061035156, 'AWR': 80.68000030517578, 'AMD': 81.43000030517578, 'PZZA': 81.87000274658203, 'MTH': 82.2300033569336, 'UMBF': 86.16000366210938, 'EXPO': 90.2699966430664, 'ASGN': 90.79000091552734, 'TER': 93.29000091552734, 'CHD': 93.9800033569336, 'CVS': 94.29000091552734, 'WEC':
98.80999755859375, 'GRMN': 99.7699966430664, 'SSD': 102.81999969482422, 'MGPI': 103.56999969482422, 'UHS': 103.75, 'IDA': 104.62000274658203, 'USLM': 105.51000213623047, 'SWK': 106.80999755859375, 'ABT': 107.0199966430664, 'GOOGL': 109.02999877929688, 'AME': 109.0999984741211, 'NVO': 112.9800033569336, 'TROW': 113.69000244140625, 'AMZN': 113.76000213623047, 'CPRT': 116.30000305175781, 'EXP': 116.41999816894531, 'DOV': 119.9800033569336, 'AMED': 122.98999786376953, 'CPK': 126.20999908447266, 'BCPC': 126.36000061035156, 'WSM': 132.00999450683594, 'DGX': 133.64999389648438, 'TTEK': 136.5800018310547, 'ITIC': 138.3000030517578, 'QCOM':
141.69000244140625, 'MMC': 148.35000610351562, 'TGT': 149.36000061035156, 'TRV': 154.99000549316406, 'TM': 156.75, 'RGEN': 160.4199981689453, 'AJG': 161.8800048828125, 'EXR': 168.60000610351562, 'GPI': 169.00999450683594, 'MED': 169.74000549316406, 'CCI':
170.1300048828125, 'AAP': 185.27000427246094, 'LOW': 185.7899932861328, 'NFLX': 190.9199981689453, 'CASY': 196.80999755859375, 'SAIA': 198.75999450683594, 'NICE': 198.85000610351562, 'TSCO': 203.49000549316406, 'ROK': 204.6999969482422, 'ADP': 211.30999755859375, 'CVCO': 222.77000427246094, 'APD': 223.55999755859375, 'GNRC': 223.6999969482422, 'ESLT': 229.24000549316406, 'IT': 238.77000427246094, 'DHR': 247.05999755859375, 'WSO': 247.7899932861328, 'MSFT': 254.25, 'UI': 254.3300018310547, 'ODFL': 261.5, 'ACN': 268.6499938964844, 'DECK': 275.9100036621094, 'MCO': 280.8500061035156, 'LAD': 283.8299865722656, 'WST': 291.9800109863281,
'HD': 293.04998779296875, 'EPAM': 305.8599853515625, 'SNPS': 310.42999267578125, 'HIFS': 319.260009765625, 'KLAC': 329.489990234375, 'SPGI': 345.3599853515625,
'IDXX': 360.6000061035156, 'POOL': 372.7099914550781, 'INTU': 388.25, 'DPZ': 406.80999755859375, 'MPWR': 409.0400085449219, 'MSCI': 412.010009765625, 'SIVB': 413.80999755859375, 'FICO': 425.3999938964844, 'ASML': 473.4800109863281, 'BIO': 475.7900085449219, 'COKE': 495.489990234375, 'COST': 516.2999877929688, 'UNH': 519.3699951171875, 'TMO': 520.760009765625, 'BLK': 597.530029296875, 'ORLY': 672.739990234375, 'FCNCA': 681.280029296875, 'TSLA':
721.6400146484375, 'MTD': 1122.800048828125, 'CMG': 1319.1600341796875, 'AZO': 2191.800048828125, 'NVR': 4363.97021484375}


nonDrawDown = {'SOTK': 6.260000228881836, 'VOD': 15.489999771118164, 'MRTN': 17.149999618530273, 'VIVO': 32.189998626708984, 'HWKN': 34.369998931884766, 'CMC': 34.560001373291016, 'GCBC': 47.849998474121094, 'ARTNA': 50.77000045776367, 'WABC': 55.0, 'PNW': 69.93000030517578, 'GIS': 73.94999694824219,
'ADC': 74.7300033569336, 'WEC':
98.80999755859375, 'MGPI': 103.56999969482422, 'TRV': 154.99000549316406, 'ESLT': 229.24000549316406, 'FICO': 425.3999938964844, 'UNH': 519.3699951171875, 'AZO': 2191.800048828125}

smallDrwaDown = {'VOD': 15.489999771118164, 'SLM': 15.859999656677246, 'MRTN': 17.149999618530273, 'SHEN': 20.940000534057617, 'MAT': 21.579999923706055, 'PHI': 29.649999618530273, 'AROW': 31.780000686645508, 'VIVO': 32.189998626708984, 'GABC': 34.13999938964844, 'HWKN':
34.369998931884766, 'CMC': 34.560001373291016, 'UBSI': 35.34000015258789, 'NRIM': 40.560001373291016, 'WTRG': 46.88999938964844, 'GCBC': 47.849998474121094, 'FAST': 47.88999938964844, 'WASH':
48.61000061035156, 'LKQ': 50.16999816894531, 'PLUS': 50.650001525878906, 'ARTNA': 50.77000045776367, 'WABC': 55.0, 'SEE': 55.83000183105469, 'LNT': 56.810001373291016, 'SENEB': 58.0, 'BRO': 58.7599983215332, 'TD': 61.380001068115234, 'OTTR': 66.08000183105469, 'XEL': 68.55000305175781, 'PNW': 69.93000030517578, 'CP': 71.41000366210938, 'CLFD': 74.05999755859375, 'ENSG': 74.5199966430664, 'ADC': 74.7300033569336,
'MGEE': 76.83000183105469, 'PLXS': 77.87999725341797, 'CRMT': 93.45999908447266, 'CHD': 93.9800033569336, 'CVS': 94.29000091552734, 'WEC': 98.80999755859375, 'MGPI': 103.56999969482422, 'UHS': 103.75, 'IDA': 104.62000274658203, 'USLM': 105.51000213623047,
'ABT': 107.0199966430664, 'NVO': 112.9800033569336, 'CPK': 126.20999908447266, 'DGX': 133.64999389648438, 'MMC': 148.35000610351562, 'TRV': 154.99000549316406,
'TM': 156.75, 'AJG': 161.8800048828125, 'EXR': 168.60000610351562, 'GPI': 169.00999450683594, 'MED': 169.74000549316406, 'CCI':
170.1300048828125, 'TSCO': 203.49000549316406, 'ADP': 211.30999755859375, 'APD': 223.55999755859375, 'ESLT': 229.24000549316406, 'UI': 254.3300018310547, 'LAD': 283.8299865722656, 'SNPS': 310.42999267578125, 'FICO': 425.3999938964844, 'COKE': 495.489990234375, 'COST': 516.2999877929688,
'UNH': 519.3699951171875, 'TMO': 520.760009765625, 'ORLY': 672.739990234375, 'AZO': 2191.800048828125}
# longTernList = []
# for key, val in longTernDict.items():
#     longTernList.append(key)

def backtest(dataDict, bar):
    initialCash = 500
    performanceDict = {}
    daysBack = 1000
    for i in range(0, daysBack):
        for key, val in dataDict.items():
            if key in longTernList:
                performance = val[-daysBack+i][0]/val[-daysBack+i-bar][3]
                # performance = val[-daysBack+i-1][3]/val[-daysBack+i-bar][0]
                performanceDict[key] = performance
    
        performanceDict = dict(sorted(performanceDict.items(), key = lambda x: x[1], reverse = True))
        count = 0
        for key, val in performanceDict.items():
            count += 1
            if count > 1:
            # if (
            #     dataDict[key][-daysBack+i][0] > dataDict[key][-daysBack+i-1][3]
            # ):
                gain = dataDict[key][-daysBack+i][3]/dataDict[key][-daysBack+i][0]
                initialCash *= gain
                print(key, gain)
                break
    return initialCash

def backtestShort(dataDict, bar):
    initialCash = 500
    performanceDict = {}
    daysBack = 167
    for i in range(0, daysBack):
        for key, val in dataDict.items():
            performance = val[-daysBack+i][3]/val[-daysBack+i-bar][0]
            performanceDict[key] = performance
    
        performanceDict = dict(sorted(performanceDict.items(), key = lambda x: x[1]))
        count = 0
        for key, val in performanceDict.items():
            count += 1
            # if (
            #     dataDict[key][-daysBack+i][0] < dataDict[key][-daysBack+i-1][3]
            # ):
            # if count > 12:
            gain = 2-(dataDict[key][-daysBack+i][3]/dataDict[key][-daysBack+i][0])
            initialCash *= gain
            print(key, gain)
            break
    return initialCash

def Main(short=False):
    if not short:
        longTern = GetMomentum()
    else:
        longTern = GetPut()
    for symbol in longTernList:
        longTern.append(symbol)
    dataDict = {}
    optionArr = ['AGRX', 'SIGA', 'AMC', 'BBBY', 'AYTU', 'TYME', 'RDHL', 'CMRX', 'VERU', 'GNUS', 'GME', 'HAL', 'OCGN', 'MYMD', 'SPPI', 'UAL', 'GM', 'CRIS', 'GERN', 'CYCC',
'JAGX', 'SRNE', 'TCRT', 'SLNO', 'ONVO', 'AMPE', 'LCTX', 'ACB', 'ARDX', 'INO', 'VSTM', 'SEAC', 'AVDL', 'DMAC', 'AVXL', 'ONCT', 'WKHS', 'PDSB', 'ACER', 'CRH', 'NKE', 'BTX', 'PMCB', 'KZIA', 'ORMP', 'CNCE', 'RELX', 'VXRT', 'DRRX', 'IBM', 'SAVA', 'CRBP', 'VIVO', 'HEPA', 'CTXR', 'CLLS', 'FBIO', 'NBRV', 'ASRT', 'PRPH', 'AUPH', 'TKC', 'NHWK', 'KMPH', 'HALL', 'NNVC', 'ATXS', 'CARA', 'DGLY', 'ZYNE', 'CEMI', 'FATE', 'CCXI', 'FL', 'AGTC', 'CGEN', 'MDGL', 'MTEM', 'ARCT', 'VTGN', 'ALDX', 'AYRO', 'EXEL', 'TIMB', 'VCYT',
'GENE', 'SKM', 'GOGO', 'QURE', 'ACAD', 'ALBO', 'BCDA',
'ACLS', 'VVPR', 'BCLI', 'HEES', 'OPK', 'KDNY', 'ONTX', 'RCII', 'FCUV', 'XENE', 'VRDN', 'SMSI', 'KALV', 'SPOK', 'ATEX', 'EPIX', 'ATNM', 'MACK', 'ENVA', 'PIRS', 'EYPT', 'ITCI', 'NBSE', 'OCUL', 'IMUX', 'XBIT', 'TKAT', 'HSKA', 'WSBF', 'CPIX', 'XNCR', 'FOR', 'IZEA', 'IDRA', 'ABIO', 'NERV', 'LNDC', 'APTO', 'GLRE',
'PRG', 'SYBX', 'PRTA', 'HCI', 'EYES', 'RGLS', 'VYGR', 'IMMP',
'LPCN', 'LRMR', 'ATLC', 'SMMT', 'RCI', 'ADAP', 'MGNX', 'ABUS', 'VMC', 'IIIN', 'ALPN', 'IMGN', 'UVE', 'PPBT', 'WIRE', 'LGND', 'TDS', 'TU', 'USM', 'ACRS', 'DYAI', 'UONE', 'TIPT', 'LIFE', 'MLM', 'UIHC', 'SGMO', 'SCYX', 'EIGR', 'FANH', 'XOMA', 'AVEO',
'RGNX', 'AMPH', 'VCEL', 'BSQR', 'KURA', 'MNOV', 'CPRX', 'OCUP', 'SUM', 'ACHV', 'CAPR', 'CFRX', 'TARO', 'MYGN', 'MRNS', 'BLRX', 'CORT', 'RLMD', 'CVM', 'VTSI', 'PLXP', 'ISEE', 'EXP', 'IRBT', 'MTG', 'ENTA', 'HRTG', 'CBAY', 'EKSO', 'SCTL', 'STC']
    for symbol in longTern:
        # if symbol not in optionArr: continue
        # if not haveOptionChain(symbol): continue
        npArr = GetNpData(symbol, 'USD', False)
        if len(npArr) < 168: continue
        # npArr = npArr[-168:]
        dataDict[symbol] = npArr

    maxCapital = 0
    maxPeriod = 0

    # period = 184
    period = 1
    # while period < 365:
    if not short:
        capital = backtest(dataDict, period)
    else:
        capital = backtestShort(dataDict, period)
    if capital > maxCapital:
        maxCapital = capital
        maxPeriod = period

    print(f"maxCapital {int(maxCapital)} maxPeriod {maxPeriod}")
    return 0

Main()
# Main(short=True)